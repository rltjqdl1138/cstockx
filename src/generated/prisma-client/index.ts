// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  product: (where?: ProductWhereInput) => Promise<boolean>;
  transaction: (where?: TransactionWhereInput) => Promise<boolean>;
  transactionRaw: (where?: TransactionRawWhereInput) => Promise<boolean>;
  uRL: (where?: URLWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  product: (where: ProductWhereUniqueInput) => ProductPromise;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Product>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnectionPromise;
  transaction: (where: TransactionWhereUniqueInput) => TransactionPromise;
  transactions: (
    args?: {
      where?: TransactionWhereInput;
      orderBy?: TransactionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Transaction>;
  transactionsConnection: (
    args?: {
      where?: TransactionWhereInput;
      orderBy?: TransactionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TransactionConnectionPromise;
  transactionRaw: (
    where: TransactionRawWhereUniqueInput
  ) => TransactionRawPromise;
  transactionRaws: (
    args?: {
      where?: TransactionRawWhereInput;
      orderBy?: TransactionRawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TransactionRaw>;
  transactionRawsConnection: (
    args?: {
      where?: TransactionRawWhereInput;
      orderBy?: TransactionRawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TransactionRawConnectionPromise;
  uRL: (where: URLWhereUniqueInput) => URLPromise;
  uRLs: (
    args?: {
      where?: URLWhereInput;
      orderBy?: URLOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<URL>;
  uRLsConnection: (
    args?: {
      where?: URLWhereInput;
      orderBy?: URLOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => URLConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => ProductPromise;
  updateManyProducts: (
    args: { data: ProductUpdateManyMutationInput; where?: ProductWhereInput }
  ) => BatchPayloadPromise;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createTransaction: (data: TransactionCreateInput) => TransactionPromise;
  updateTransaction: (
    args: { data: TransactionUpdateInput; where: TransactionWhereUniqueInput }
  ) => TransactionPromise;
  updateManyTransactions: (
    args: {
      data: TransactionUpdateManyMutationInput;
      where?: TransactionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertTransaction: (
    args: {
      where: TransactionWhereUniqueInput;
      create: TransactionCreateInput;
      update: TransactionUpdateInput;
    }
  ) => TransactionPromise;
  deleteTransaction: (where: TransactionWhereUniqueInput) => TransactionPromise;
  deleteManyTransactions: (
    where?: TransactionWhereInput
  ) => BatchPayloadPromise;
  createTransactionRaw: (
    data: TransactionRawCreateInput
  ) => TransactionRawPromise;
  updateTransactionRaw: (
    args: {
      data: TransactionRawUpdateInput;
      where: TransactionRawWhereUniqueInput;
    }
  ) => TransactionRawPromise;
  updateManyTransactionRaws: (
    args: {
      data: TransactionRawUpdateManyMutationInput;
      where?: TransactionRawWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertTransactionRaw: (
    args: {
      where: TransactionRawWhereUniqueInput;
      create: TransactionRawCreateInput;
      update: TransactionRawUpdateInput;
    }
  ) => TransactionRawPromise;
  deleteTransactionRaw: (
    where: TransactionRawWhereUniqueInput
  ) => TransactionRawPromise;
  deleteManyTransactionRaws: (
    where?: TransactionRawWhereInput
  ) => BatchPayloadPromise;
  createURL: (data: URLCreateInput) => URLPromise;
  updateURL: (
    args: { data: URLUpdateInput; where: URLWhereUniqueInput }
  ) => URLPromise;
  updateManyURLs: (
    args: { data: URLUpdateManyMutationInput; where?: URLWhereInput }
  ) => BatchPayloadPromise;
  upsertURL: (
    args: {
      where: URLWhereUniqueInput;
      create: URLCreateInput;
      update: URLUpdateInput;
    }
  ) => URLPromise;
  deleteURL: (where: URLWhereUniqueInput) => URLPromise;
  deleteManyURLs: (where?: URLWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  transaction: (
    where?: TransactionSubscriptionWhereInput
  ) => TransactionSubscriptionPayloadSubscription;
  transactionRaw: (
    where?: TransactionRawSubscriptionWhereInput
  ) => TransactionRawSubscriptionPayloadSubscription;
  uRL: (
    where?: URLSubscriptionWhereInput
  ) => URLSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "uuid_ASC"
  | "uuid_DESC"
  | "brand_ASC"
  | "brand_DESC"
  | "category_ASC"
  | "category_DESC"
  | "shoe_ASC"
  | "shoe_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "urlKey_ASC"
  | "urlKey_DESC"
  | "urlForCheck_ASC"
  | "urlForCheck_DESC"
  | "imgURL_ASC"
  | "imgURL_DESC"
  | "releaseDate_ASC"
  | "releaseDate_DESC"
  | "retailPrice_ASC"
  | "retailPrice_DESC"
  | "rawData_ASC"
  | "rawData_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TransactionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "chainId_ASC"
  | "chainId_DESC"
  | "date_ASC"
  | "date_DESC"
  | "shoeSize_ASC"
  | "shoeSize_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "skuUuid_ASC"
  | "skuUuid_DESC"
  | "localAmount_ASC"
  | "localAmount_DESC"
  | "localCurrency_ASC"
  | "localCurrency_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TransactionRawOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "uuid_ASC"
  | "uuid_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "category_ASC"
  | "category_DESC"
  | "rawData_ASC"
  | "rawData_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type URLOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "ProductAmount_ASC"
  | "ProductAmount_DESC"
  | "lastPage_ASC"
  | "lastPage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isComplete_ASC"
  | "isComplete_DESC";

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  uuid?: String;
}>;

export interface TransactionRawCreateInput {
  url: String;
  uuid: String;
  amount: Int;
  category: String;
  rawData: Json;
}

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  uuid?: String;
  uuid_not?: String;
  uuid_in?: String[] | String;
  uuid_not_in?: String[] | String;
  uuid_lt?: String;
  uuid_lte?: String;
  uuid_gt?: String;
  uuid_gte?: String;
  uuid_contains?: String;
  uuid_not_contains?: String;
  uuid_starts_with?: String;
  uuid_not_starts_with?: String;
  uuid_ends_with?: String;
  uuid_not_ends_with?: String;
  brand?: String;
  brand_not?: String;
  brand_in?: String[] | String;
  brand_not_in?: String[] | String;
  brand_lt?: String;
  brand_lte?: String;
  brand_gt?: String;
  brand_gte?: String;
  brand_contains?: String;
  brand_not_contains?: String;
  brand_starts_with?: String;
  brand_not_starts_with?: String;
  brand_ends_with?: String;
  brand_not_ends_with?: String;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  shoe?: String;
  shoe_not?: String;
  shoe_in?: String[] | String;
  shoe_not_in?: String[] | String;
  shoe_lt?: String;
  shoe_lte?: String;
  shoe_gt?: String;
  shoe_gte?: String;
  shoe_contains?: String;
  shoe_not_contains?: String;
  shoe_starts_with?: String;
  shoe_not_starts_with?: String;
  shoe_ends_with?: String;
  shoe_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  urlKey?: String;
  urlKey_not?: String;
  urlKey_in?: String[] | String;
  urlKey_not_in?: String[] | String;
  urlKey_lt?: String;
  urlKey_lte?: String;
  urlKey_gt?: String;
  urlKey_gte?: String;
  urlKey_contains?: String;
  urlKey_not_contains?: String;
  urlKey_starts_with?: String;
  urlKey_not_starts_with?: String;
  urlKey_ends_with?: String;
  urlKey_not_ends_with?: String;
  urlForCheck?: String;
  urlForCheck_not?: String;
  urlForCheck_in?: String[] | String;
  urlForCheck_not_in?: String[] | String;
  urlForCheck_lt?: String;
  urlForCheck_lte?: String;
  urlForCheck_gt?: String;
  urlForCheck_gte?: String;
  urlForCheck_contains?: String;
  urlForCheck_not_contains?: String;
  urlForCheck_starts_with?: String;
  urlForCheck_not_starts_with?: String;
  urlForCheck_ends_with?: String;
  urlForCheck_not_ends_with?: String;
  imgURL?: String;
  imgURL_not?: String;
  imgURL_in?: String[] | String;
  imgURL_not_in?: String[] | String;
  imgURL_lt?: String;
  imgURL_lte?: String;
  imgURL_gt?: String;
  imgURL_gte?: String;
  imgURL_contains?: String;
  imgURL_not_contains?: String;
  imgURL_starts_with?: String;
  imgURL_not_starts_with?: String;
  imgURL_ends_with?: String;
  imgURL_not_ends_with?: String;
  releaseDate?: DateTimeInput;
  releaseDate_not?: DateTimeInput;
  releaseDate_in?: DateTimeInput[] | DateTimeInput;
  releaseDate_not_in?: DateTimeInput[] | DateTimeInput;
  releaseDate_lt?: DateTimeInput;
  releaseDate_lte?: DateTimeInput;
  releaseDate_gt?: DateTimeInput;
  releaseDate_gte?: DateTimeInput;
  retailPrice?: Int;
  retailPrice_not?: Int;
  retailPrice_in?: Int[] | Int;
  retailPrice_not_in?: Int[] | Int;
  retailPrice_lt?: Int;
  retailPrice_lte?: Int;
  retailPrice_gt?: Int;
  retailPrice_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface TransactionUpdateManyMutationInput {
  chainId?: String;
  date?: String;
  shoeSize?: String;
  productId?: String;
  skuUuid?: String;
  localAmount?: String;
  localCurrency?: String;
}

export interface TransactionRawSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TransactionRawWhereInput;
  AND?:
    | TransactionRawSubscriptionWhereInput[]
    | TransactionRawSubscriptionWhereInput;
  OR?:
    | TransactionRawSubscriptionWhereInput[]
    | TransactionRawSubscriptionWhereInput;
  NOT?:
    | TransactionRawSubscriptionWhereInput[]
    | TransactionRawSubscriptionWhereInput;
}

export type TransactionRawWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  url?: String;
}>;

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export interface TransactionUpdateInput {
  chainId?: String;
  date?: String;
  shoeSize?: String;
  productId?: String;
  skuUuid?: String;
  localAmount?: String;
  localCurrency?: String;
}

export interface URLUpdateInput {
  url?: String;
  ProductAmount?: Int;
  lastPage?: Int;
  isComplete?: Boolean;
}

export interface TransactionRawWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  uuid?: String;
  uuid_not?: String;
  uuid_in?: String[] | String;
  uuid_not_in?: String[] | String;
  uuid_lt?: String;
  uuid_lte?: String;
  uuid_gt?: String;
  uuid_gte?: String;
  uuid_contains?: String;
  uuid_not_contains?: String;
  uuid_starts_with?: String;
  uuid_not_starts_with?: String;
  uuid_ends_with?: String;
  uuid_not_ends_with?: String;
  amount?: Int;
  amount_not?: Int;
  amount_in?: Int[] | Int;
  amount_not_in?: Int[] | Int;
  amount_lt?: Int;
  amount_lte?: Int;
  amount_gt?: Int;
  amount_gte?: Int;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: TransactionRawWhereInput[] | TransactionRawWhereInput;
  OR?: TransactionRawWhereInput[] | TransactionRawWhereInput;
  NOT?: TransactionRawWhereInput[] | TransactionRawWhereInput;
}

export interface URLCreateInput {
  url: String;
  ProductAmount: Int;
  lastPage: Int;
  isComplete: Boolean;
}

export interface TransactionCreateInput {
  chainId: String;
  date: String;
  shoeSize: String;
  productId: String;
  skuUuid: String;
  localAmount: String;
  localCurrency: String;
}

export interface TransactionRawUpdateManyMutationInput {
  url?: String;
  uuid?: String;
  amount?: Int;
  category?: String;
  rawData?: Json;
}

export interface ProductUpdateManyMutationInput {
  uuid?: String;
  brand?: String;
  category?: String;
  shoe?: String;
  name?: String;
  title?: String;
  urlKey?: String;
  urlForCheck?: String;
  imgURL?: String;
  releaseDate?: DateTimeInput;
  retailPrice?: Int;
  rawData?: Json;
}

export interface URLSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: URLWhereInput;
  AND?: URLSubscriptionWhereInput[] | URLSubscriptionWhereInput;
  OR?: URLSubscriptionWhereInput[] | URLSubscriptionWhereInput;
  NOT?: URLSubscriptionWhereInput[] | URLSubscriptionWhereInput;
}

export interface ProductUpdateInput {
  uuid?: String;
  brand?: String;
  category?: String;
  shoe?: String;
  name?: String;
  title?: String;
  urlKey?: String;
  urlForCheck?: String;
  imgURL?: String;
  releaseDate?: DateTimeInput;
  retailPrice?: Int;
  rawData?: Json;
}

export interface URLUpdateManyMutationInput {
  url?: String;
  ProductAmount?: Int;
  lastPage?: Int;
  isComplete?: Boolean;
}

export interface URLWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  ProductAmount?: Int;
  ProductAmount_not?: Int;
  ProductAmount_in?: Int[] | Int;
  ProductAmount_not_in?: Int[] | Int;
  ProductAmount_lt?: Int;
  ProductAmount_lte?: Int;
  ProductAmount_gt?: Int;
  ProductAmount_gte?: Int;
  lastPage?: Int;
  lastPage_not?: Int;
  lastPage_in?: Int[] | Int;
  lastPage_not_in?: Int[] | Int;
  lastPage_lt?: Int;
  lastPage_lte?: Int;
  lastPage_gt?: Int;
  lastPage_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  isComplete?: Boolean;
  isComplete_not?: Boolean;
  AND?: URLWhereInput[] | URLWhereInput;
  OR?: URLWhereInput[] | URLWhereInput;
  NOT?: URLWhereInput[] | URLWhereInput;
}

export type URLWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProductCreateInput {
  uuid: String;
  brand: String;
  category: String;
  shoe: String;
  name: String;
  title: String;
  urlKey: String;
  urlForCheck: String;
  imgURL?: String;
  releaseDate?: DateTimeInput;
  retailPrice?: Int;
  rawData: Json;
}

export type TransactionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TransactionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TransactionWhereInput;
  AND?: TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput;
  OR?: TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput;
  NOT?: TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput;
}

export interface TransactionRawUpdateInput {
  url?: String;
  uuid?: String;
  amount?: Int;
  category?: String;
  rawData?: Json;
}

export interface TransactionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  chainId?: String;
  chainId_not?: String;
  chainId_in?: String[] | String;
  chainId_not_in?: String[] | String;
  chainId_lt?: String;
  chainId_lte?: String;
  chainId_gt?: String;
  chainId_gte?: String;
  chainId_contains?: String;
  chainId_not_contains?: String;
  chainId_starts_with?: String;
  chainId_not_starts_with?: String;
  chainId_ends_with?: String;
  chainId_not_ends_with?: String;
  date?: String;
  date_not?: String;
  date_in?: String[] | String;
  date_not_in?: String[] | String;
  date_lt?: String;
  date_lte?: String;
  date_gt?: String;
  date_gte?: String;
  date_contains?: String;
  date_not_contains?: String;
  date_starts_with?: String;
  date_not_starts_with?: String;
  date_ends_with?: String;
  date_not_ends_with?: String;
  shoeSize?: String;
  shoeSize_not?: String;
  shoeSize_in?: String[] | String;
  shoeSize_not_in?: String[] | String;
  shoeSize_lt?: String;
  shoeSize_lte?: String;
  shoeSize_gt?: String;
  shoeSize_gte?: String;
  shoeSize_contains?: String;
  shoeSize_not_contains?: String;
  shoeSize_starts_with?: String;
  shoeSize_not_starts_with?: String;
  shoeSize_ends_with?: String;
  shoeSize_not_ends_with?: String;
  productId?: String;
  productId_not?: String;
  productId_in?: String[] | String;
  productId_not_in?: String[] | String;
  productId_lt?: String;
  productId_lte?: String;
  productId_gt?: String;
  productId_gte?: String;
  productId_contains?: String;
  productId_not_contains?: String;
  productId_starts_with?: String;
  productId_not_starts_with?: String;
  productId_ends_with?: String;
  productId_not_ends_with?: String;
  skuUuid?: String;
  skuUuid_not?: String;
  skuUuid_in?: String[] | String;
  skuUuid_not_in?: String[] | String;
  skuUuid_lt?: String;
  skuUuid_lte?: String;
  skuUuid_gt?: String;
  skuUuid_gte?: String;
  skuUuid_contains?: String;
  skuUuid_not_contains?: String;
  skuUuid_starts_with?: String;
  skuUuid_not_starts_with?: String;
  skuUuid_ends_with?: String;
  skuUuid_not_ends_with?: String;
  localAmount?: String;
  localAmount_not?: String;
  localAmount_in?: String[] | String;
  localAmount_not_in?: String[] | String;
  localAmount_lt?: String;
  localAmount_lte?: String;
  localAmount_gt?: String;
  localAmount_gte?: String;
  localAmount_contains?: String;
  localAmount_not_contains?: String;
  localAmount_starts_with?: String;
  localAmount_not_starts_with?: String;
  localAmount_ends_with?: String;
  localAmount_not_ends_with?: String;
  localCurrency?: String;
  localCurrency_not?: String;
  localCurrency_in?: String[] | String;
  localCurrency_not_in?: String[] | String;
  localCurrency_lt?: String;
  localCurrency_lte?: String;
  localCurrency_gt?: String;
  localCurrency_gte?: String;
  localCurrency_contains?: String;
  localCurrency_not_contains?: String;
  localCurrency_starts_with?: String;
  localCurrency_not_starts_with?: String;
  localCurrency_ends_with?: String;
  localCurrency_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: TransactionWhereInput[] | TransactionWhereInput;
  OR?: TransactionWhereInput[] | TransactionWhereInput;
  NOT?: TransactionWhereInput[] | TransactionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateURL {
  count: Int;
}

export interface AggregateURLPromise
  extends Promise<AggregateURL>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateURLSubscription
  extends Promise<AsyncIterator<AggregateURL>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface URLPreviousValues {
  id: ID_Output;
  url: String;
  ProductAmount: Int;
  lastPage: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isComplete: Boolean;
}

export interface URLPreviousValuesPromise
  extends Promise<URLPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  ProductAmount: () => Promise<Int>;
  lastPage: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isComplete: () => Promise<Boolean>;
}

export interface URLPreviousValuesSubscription
  extends Promise<AsyncIterator<URLPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  ProductAmount: () => Promise<AsyncIterator<Int>>;
  lastPage: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isComplete: () => Promise<AsyncIterator<Boolean>>;
}

export interface Transaction {
  id: ID_Output;
  chainId: String;
  date: String;
  shoeSize: String;
  productId: String;
  skuUuid: String;
  localAmount: String;
  localCurrency: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TransactionPromise extends Promise<Transaction>, Fragmentable {
  id: () => Promise<ID_Output>;
  chainId: () => Promise<String>;
  date: () => Promise<String>;
  shoeSize: () => Promise<String>;
  productId: () => Promise<String>;
  skuUuid: () => Promise<String>;
  localAmount: () => Promise<String>;
  localCurrency: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TransactionSubscription
  extends Promise<AsyncIterator<Transaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chainId: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
  shoeSize: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<String>>;
  skuUuid: () => Promise<AsyncIterator<String>>;
  localAmount: () => Promise<AsyncIterator<String>>;
  localCurrency: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface URLConnection {
  pageInfo: PageInfo;
  edges: URLEdge[];
}

export interface URLConnectionPromise
  extends Promise<URLConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<URLEdge>>() => T;
  aggregate: <T = AggregateURLPromise>() => T;
}

export interface URLConnectionSubscription
  extends Promise<AsyncIterator<URLConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<URLEdgeSubscription>>>() => T;
  aggregate: <T = AggregateURLSubscription>() => T;
}

export interface TransactionRawPreviousValues {
  id: ID_Output;
  url: String;
  uuid: String;
  amount: Int;
  category: String;
  rawData: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TransactionRawPreviousValuesPromise
  extends Promise<TransactionRawPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  uuid: () => Promise<String>;
  amount: () => Promise<Int>;
  category: () => Promise<String>;
  rawData: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TransactionRawPreviousValuesSubscription
  extends Promise<AsyncIterator<TransactionRawPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  uuid: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
  category: () => Promise<AsyncIterator<String>>;
  rawData: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TransactionPreviousValues {
  id: ID_Output;
  chainId: String;
  date: String;
  shoeSize: String;
  productId: String;
  skuUuid: String;
  localAmount: String;
  localCurrency: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TransactionPreviousValuesPromise
  extends Promise<TransactionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  chainId: () => Promise<String>;
  date: () => Promise<String>;
  shoeSize: () => Promise<String>;
  productId: () => Promise<String>;
  skuUuid: () => Promise<String>;
  localAmount: () => Promise<String>;
  localCurrency: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TransactionPreviousValuesSubscription
  extends Promise<AsyncIterator<TransactionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chainId: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
  shoeSize: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<String>>;
  skuUuid: () => Promise<AsyncIterator<String>>;
  localAmount: () => Promise<AsyncIterator<String>>;
  localCurrency: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface URLEdge {
  node: URL;
  cursor: String;
}

export interface URLEdgePromise extends Promise<URLEdge>, Fragmentable {
  node: <T = URLPromise>() => T;
  cursor: () => Promise<String>;
}

export interface URLEdgeSubscription
  extends Promise<AsyncIterator<URLEdge>>,
    Fragmentable {
  node: <T = URLSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface URL {
  id: ID_Output;
  url: String;
  ProductAmount: Int;
  lastPage: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isComplete: Boolean;
}

export interface URLPromise extends Promise<URL>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  ProductAmount: () => Promise<Int>;
  lastPage: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isComplete: () => Promise<Boolean>;
}

export interface URLSubscription
  extends Promise<AsyncIterator<URL>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  ProductAmount: () => Promise<AsyncIterator<Int>>;
  lastPage: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isComplete: () => Promise<AsyncIterator<Boolean>>;
}

export interface TransactionRawEdge {
  node: TransactionRaw;
  cursor: String;
}

export interface TransactionRawEdgePromise
  extends Promise<TransactionRawEdge>,
    Fragmentable {
  node: <T = TransactionRawPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TransactionRawEdgeSubscription
  extends Promise<AsyncIterator<TransactionRawEdge>>,
    Fragmentable {
  node: <T = TransactionRawSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TransactionRawSubscriptionPayload {
  mutation: MutationType;
  node: TransactionRaw;
  updatedFields: String[];
  previousValues: TransactionRawPreviousValues;
}

export interface TransactionRawSubscriptionPayloadPromise
  extends Promise<TransactionRawSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TransactionRawPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TransactionRawPreviousValuesPromise>() => T;
}

export interface TransactionRawSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TransactionRawSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TransactionRawSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TransactionRawPreviousValuesSubscription>() => T;
}

export interface Product {
  id: ID_Output;
  uuid: String;
  brand: String;
  category: String;
  shoe: String;
  name: String;
  title: String;
  urlKey: String;
  urlForCheck: String;
  imgURL?: String;
  releaseDate?: DateTimeOutput;
  retailPrice?: Int;
  rawData: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  uuid: () => Promise<String>;
  brand: () => Promise<String>;
  category: () => Promise<String>;
  shoe: () => Promise<String>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  urlKey: () => Promise<String>;
  urlForCheck: () => Promise<String>;
  imgURL: () => Promise<String>;
  releaseDate: () => Promise<DateTimeOutput>;
  retailPrice: () => Promise<Int>;
  rawData: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uuid: () => Promise<AsyncIterator<String>>;
  brand: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  shoe: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  urlKey: () => Promise<AsyncIterator<String>>;
  urlForCheck: () => Promise<AsyncIterator<String>>;
  imgURL: () => Promise<AsyncIterator<String>>;
  releaseDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  retailPrice: () => Promise<AsyncIterator<Int>>;
  rawData: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface AggregateTransaction {
  count: Int;
}

export interface AggregateTransactionPromise
  extends Promise<AggregateTransaction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTransactionSubscription
  extends Promise<AsyncIterator<AggregateTransaction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TransactionConnection {
  pageInfo: PageInfo;
  edges: TransactionEdge[];
}

export interface TransactionConnectionPromise
  extends Promise<TransactionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TransactionEdge>>() => T;
  aggregate: <T = AggregateTransactionPromise>() => T;
}

export interface TransactionConnectionSubscription
  extends Promise<AsyncIterator<TransactionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TransactionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTransactionSubscription>() => T;
}

export interface TransactionSubscriptionPayload {
  mutation: MutationType;
  node: Transaction;
  updatedFields: String[];
  previousValues: TransactionPreviousValues;
}

export interface TransactionSubscriptionPayloadPromise
  extends Promise<TransactionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TransactionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TransactionPreviousValuesPromise>() => T;
}

export interface TransactionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TransactionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TransactionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TransactionPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductPreviousValues {
  id: ID_Output;
  uuid: String;
  brand: String;
  category: String;
  shoe: String;
  name: String;
  title: String;
  urlKey: String;
  urlForCheck: String;
  imgURL?: String;
  releaseDate?: DateTimeOutput;
  retailPrice?: Int;
  rawData: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  uuid: () => Promise<String>;
  brand: () => Promise<String>;
  category: () => Promise<String>;
  shoe: () => Promise<String>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  urlKey: () => Promise<String>;
  urlForCheck: () => Promise<String>;
  imgURL: () => Promise<String>;
  releaseDate: () => Promise<DateTimeOutput>;
  retailPrice: () => Promise<Int>;
  rawData: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uuid: () => Promise<AsyncIterator<String>>;
  brand: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  shoe: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  urlKey: () => Promise<AsyncIterator<String>>;
  urlForCheck: () => Promise<AsyncIterator<String>>;
  imgURL: () => Promise<AsyncIterator<String>>;
  releaseDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  retailPrice: () => Promise<AsyncIterator<Int>>;
  rawData: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface AggregateTransactionRaw {
  count: Int;
}

export interface AggregateTransactionRawPromise
  extends Promise<AggregateTransactionRaw>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTransactionRawSubscription
  extends Promise<AsyncIterator<AggregateTransactionRaw>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TransactionEdge {
  node: Transaction;
  cursor: String;
}

export interface TransactionEdgePromise
  extends Promise<TransactionEdge>,
    Fragmentable {
  node: <T = TransactionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TransactionEdgeSubscription
  extends Promise<AsyncIterator<TransactionEdge>>,
    Fragmentable {
  node: <T = TransactionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TransactionRaw {
  id: ID_Output;
  url: String;
  uuid: String;
  amount: Int;
  category: String;
  rawData: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TransactionRawPromise
  extends Promise<TransactionRaw>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  uuid: () => Promise<String>;
  amount: () => Promise<Int>;
  category: () => Promise<String>;
  rawData: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TransactionRawSubscription
  extends Promise<AsyncIterator<TransactionRaw>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  uuid: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
  category: () => Promise<AsyncIterator<String>>;
  rawData: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface URLSubscriptionPayload {
  mutation: MutationType;
  node: URL;
  updatedFields: String[];
  previousValues: URLPreviousValues;
}

export interface URLSubscriptionPayloadPromise
  extends Promise<URLSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = URLPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = URLPreviousValuesPromise>() => T;
}

export interface URLSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<URLSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = URLSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = URLPreviousValuesSubscription>() => T;
}

export interface TransactionRawConnection {
  pageInfo: PageInfo;
  edges: TransactionRawEdge[];
}

export interface TransactionRawConnectionPromise
  extends Promise<TransactionRawConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TransactionRawEdge>>() => T;
  aggregate: <T = AggregateTransactionRawPromise>() => T;
}

export interface TransactionRawConnectionSubscription
  extends Promise<AsyncIterator<TransactionRawConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TransactionRawEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTransactionRawSubscription>() => T;
}

export type Json = any;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Product",
    embedded: false
  },
  {
    name: "URL",
    embedded: false
  },
  {
    name: "Transaction",
    embedded: false
  },
  {
    name: "TransactionRaw",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
