java.util.concurrent.RejectedExecutionException: Task slick.basic.BasicBackend$DatabaseDef$$anon$2@78ed39ba rejected from slick.util.AsyncExecutor$$anon$2$$anon$1@45498ea5[Running, pool size = 9, active threads = 9, queued tasks = 999, completed tasks = 2635]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063)
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830)
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379)
	at slick.util.AsyncExecutor$$anon$2$$anon$3.execute(AsyncExecutor.scala:161)
	at slick.basic.BasicBackend$DatabaseDef.runSynchronousDatabaseAction(BasicBackend.scala:264)
	at slick.basic.BasicBackend$DatabaseDef.runSynchronousDatabaseAction$(BasicBackend.scala:262)
	at slick.jdbc.JdbcBackend$DatabaseDef.runSynchronousDatabaseAction(JdbcBackend.scala:37)
	at slick.basic.BasicBackend$DatabaseDef.slick$basic$BasicBackend$DatabaseDef$$runInContextInline(BasicBackend.scala:241)
	at slick.basic.BasicBackend$DatabaseDef.runInContextSafe(BasicBackend.scala:147)
	at slick.basic.BasicBackend$DatabaseDef.runInContext(BasicBackend.scala:141)
	at slick.basic.BasicBackend$DatabaseDef.runInContext$(BasicBackend.scala:140)
	at slick.jdbc.JdbcBackend$DatabaseDef.runInContext(JdbcBackend.scala:37)
	at slick.basic.BasicBackend$DatabaseDef.runInternal(BasicBackend.scala:76)
	at slick.basic.BasicBackend$DatabaseDef.runInternal$(BasicBackend.scala:75)
	at slick.jdbc.JdbcBackend$DatabaseDef.runInternal(JdbcBackend.scala:37)
	at slick.basic.BasicBackend$DatabaseDef.run(BasicBackend.scala:73)
	at slick.basic.BasicBackend$DatabaseDef.run$(BasicBackend.scala:73)
	at slick.jdbc.JdbcBackend$DatabaseDef.run(JdbcBackend.scala:37)
	at com.prisma.api.connector.jdbc.impl.JdbcDataResolver.runAttached(JdbcDataResolver.scala:45)
	at com.prisma.api.connector.jdbc.impl.JdbcDataResolver.$anonfun$getNodes$1(JdbcDataResolver.scala:60)
	at com.prisma.metrics.micrometer.MicrometerTimerMetric.timeFuture(MicrometerMetrics.scala:64)
	at com.prisma.api.connector.jdbc.impl.JdbcDataResolver.performWithTiming(JdbcDataResolver.scala:103)
	at com.prisma.api.connector.jdbc.impl.JdbcDataResolver.getNodes(JdbcDataResolver.scala:60)
	at com.prisma.api.resolver.GetNodesDeferredResolver.resolve(GetNodesDeferredResolver.scala:17)
	at com.prisma.api.resolver.DeferredResolverImpl.$anonfun$resolve$3(DeferredResolverImpl.scala:79)
	at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:233)
	at scala.collection.immutable.Map$Map1.foreach(Map.scala:125)
	at scala.collection.TraversableLike.map(TraversableLike.scala:233)
	at scala.collection.TraversableLike.map$(TraversableLike.scala:226)
	at scala.collection.AbstractTraversable.map(Traversable.scala:104)
	at com.prisma.api.resolver.DeferredResolverImpl.resolve(DeferredResolverImpl.scala:78)
	at sangria.execution.Resolver.sangria$execution$Resolver$$resolveDeferred(Resolver.scala:766)
	at sangria.execution.Resolver.$anonfun$immediatelyResolveDeferred$2(Resolver.scala:132)
	at sangria.execution.Resolver.$anonfun$immediatelyResolveDeferred$2$adapted(Resolver.scala:132)
	at scala.collection.Iterator.foreach(Iterator.scala:937)
	at scala.collection.Iterator.foreach$(Iterator.scala:937)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1425)
	at scala.collection.IterableLike.foreach(IterableLike.scala:70)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:69)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
	at sangria.execution.Resolver.$anonfun$immediatelyResolveDeferred$1(Resolver.scala:132)
	at sangria.execution.Resolver.$anonfun$immediatelyResolveDeferred$1$adapted(Resolver.scala:131)
	at scala.util.Success.foreach(Try.scala:249)
	at scala.concurrent.Future.$anonfun$foreach$1$adapted(Future.scala:225)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:60)
	at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)
	at akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:91)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
	at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:81)
	at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:91)
	at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)
	at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:44)
	at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
	at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
	at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
	at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)
{"key":"error/unhandled","requestId":"local:cjtz41m5600bg0745nvzyfzum","clientId":"default@default","payload":{"exception":"java.util.concurrent.RejectedExecutionException: Task slick.basic.BasicBackend$DatabaseDef$$anon$2@6f59ff2d rejected from slick.util.AsyncExecutor$$anon$2$$anon$1@45498ea5[Running, pool size = 9, active threads = 9, queued tasks = 1000, completed tasks = 2606]","query":"query ($where: ProductWhereInput) {\n  products(where: $where) {\n    id\n    uuid\n    brand\n    category\n    shoe\n    name\n    title\n    urlKey\n    urlForCheck\n    imgURL\n    releaseDate\n    retailPrice\n    rawData\n    createdAt\n    updatedAt\n  }\n}\n","variables":"{\"where\":{\"uuid\":\"bee38ade-dc21-40ce-801e-5c9fbfaaf5ff\"}}","code":"0","stack_trace":"java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063)\\n java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830)\\n java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379)\\n slick.util.AsyncExecutor$$anon$2$$anon$3.execute(AsyncExecutor.scala:161)\\n slick.basic.BasicBackend$DatabaseDef.runSynchronousDatabaseAction(BasicBackend.scala:264)\\n slick.basic.BasicBackend$DatabaseDef.runSynchronousDatabaseAction$(BasicBackend.scala:262)\\n slick.jdbc.JdbcBackend$DatabaseDef.runSynchronousDatabaseAction(JdbcBackend.scala:37)\\n slick.basic.BasicBackend$DatabaseDef.slick$basic$BasicBackend$DatabaseDef$$runInContextInline(BasicBackend.scala:241)\\n slick.basic.BasicBackend$DatabaseDef.runInContextSafe(BasicBackend.scala:147)\\n slick.basic.BasicBackend$DatabaseDef.runInContext(BasicBackend.scala:141)\\n slick.basic.BasicBackend$DatabaseDef.runInContext$(BasicBackend.scala:140)\\n slick.jdbc.JdbcBackend$DatabaseDef.runInContext(JdbcBackend.scala:37)\\n slick.basic.BasicBackend$DatabaseDef.runInternal(BasicBackend.scala:76)\\n slick.basic.BasicBackend$DatabaseDef.runInternal$(BasicBackend.scala:75)\\n slick.jdbc.JdbcBackend$DatabaseDef.runInternal(JdbcBackend.scala:37)\\n slick.basic.BasicBackend$DatabaseDef.run(BasicBackend.scala:73)\\n slick.basic.BasicBackend$DatabaseDef.run$(BasicBackend.scala:73)\\n slick.jdbc.JdbcBackend$DatabaseDef.run(JdbcBackend.scala:37)\\n com.prisma.api.connector.jdbc.impl.JdbcDataResolver.runAttached(JdbcDataResolver.scala:45)\\n com.prisma.api.connector.jdbc.impl.JdbcDataResolver.$anonfun$getNodes$1(JdbcDataResolver.scala:60)\\n com.prisma.metrics.micrometer.MicrometerTimerMetric.timeFuture(MicrometerMetrics.scala:64)\\n com.prisma.api.connector.jdbc.impl.JdbcDataResolver.performWithTiming(JdbcDataResolver.scala:103)\\n com.prisma.api.connector.jdbc.impl.JdbcDataResolver.getNodes(JdbcDataResolver.scala:60)\\n com.prisma.api.resolver.GetNodesDeferredResolver.resolve(GetNodesDeferredResolver.scala:17)\\n com.prisma.api.resolver.DeferredResolverImpl.$anonfun$resolve$3(DeferredResolverImpl.scala:79)\\n scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:233)\\n scala.collection.immutable.Map$Map1.foreach(Map.scala:125)\\n scala.collection.TraversableLike.map(TraversableLike.scala:233)\\n scala.collection.TraversableLike.map$(TraversableLike.scala:226)\\n scala.collection.AbstractTraversable.map(Traversable.scala:104)\\n com.prisma.api.resolver.DeferredResolverImpl.resolve(DeferredResolverImpl.scala:78)\\n sangria.execution.Resolver.sangria$execution$Resolver$$resolveDeferred(Resolver.scala:766)\\n sangria.execution.Resolver.$anonfun$immediatelyResolveDeferred$2(Resolver.scala:132)\\n sangria.execution.Resolver.$anonfun$immediatelyResolveDeferred$2$adapted(Resolver.scala:132)\\n scala.collection.Iterator.foreach(Iterator.scala:937)\\n scala.collection.Iterator.foreach$(Iterator.scala:937)\\n scala.collection.AbstractIterator.foreach(Iterator.scala:1425)\\n scala.collection.IterableLike.foreach(IterableLike.scala:70)\\n scala.collection.IterableLike.foreach$(IterableLike.scala:69)\\n scala.collection.AbstractIterable.foreach(Iterable.scala:54)\\n sangria.execution.Resolver.$anonfun$immediatelyResolveDeferred$1(Resolver.scala:132)\\n sangria.execution.Resolver.$anonfun$immediatelyResolveDeferred$1$adapted(Resolver.scala:131)\\n scala.util.Success.foreach(Try.scala:249)\\n scala.concurrent.Future.$anonfun$foreach$1$adapted(Future.scala:225)\\n scala.concurrent.impl.CallbackRunnable.run(Promise.scala:60)\\n akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)\\n akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:91)\\n scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)\\n scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:81)\\n akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:91)\\n akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\\n akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:44)\\n akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\n akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\\n akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\\n akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)","message":"Task slick.basic.BasicBackend$DatabaseDef$$anon$2@6f59ff2d rejected from slick.util.AsyncExecutor$$anon$2$$anon$1@45498ea5[Running, pool size = 9, active threads = 9, queued tasks = 1000, completed tasks = 2606]"}}

{ Error: Whoops. Looks like an internal server error. Search your server logs for request ID: local:cjtz41m5600bg0745nvzyfzum
    at BatchedGraphQLClient.<anonymous> (/Users/kimks/node/cstockx/node_modules/http-link-dataloader/src/BatchedGraphQLClient.ts:74:13)
    at step (/Users/kimks/node/cstockx/node_modules/http-link-dataloader/dist/src/BatchedGraphQLClient.js:40:23)
    at Object.next (/Users/kimks/node/cstockx/node_modules/http-link-dataloader/dist/src/BatchedGraphQLClient.js:21:53)
    at fulfilled (/Users/kimks/node/cstockx/node_modules/http-link-dataloader/dist/src/BatchedGraphQLClient.js:12:58)
    at process._tickCallback (internal/process/next_tick.js:68:7) result: { data: null, errors: [ [Object] ], status: 200 } }
